plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDepMgmtVersion}"
    id 'java'
    id 'war'
    id 'maven-publish'
}

sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

version projectVersion
group projectGroup

repositories {
    mavenLocal()
    // If using a Maven proxy, put the property settings in
    // ~/.gradle/gradle.properties for defaultCentral_proxy_url,
    // default_proxy_username and default_proxy_password.
    if (project.hasProperty("defaultCentral_proxy_url")) {
        maven {
            url project.property("defaultCentral_proxy_url")
            credentials {
                username project.property("default_proxy_username")
                password project.property("default_proxy_password")
            }
        }
    } else {
        mavenCentral()
    }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
}

apply from: 'springboot-versions.gradle'

dependencies {
    implementation pdep(rootProject.bidmsDeveloperCasServerDeps)
    implementation "org.apereo.cas:cas-server-webapp-starter-tomcat:$casVersion"
}

tasks.named("bootWar") {
    launchScript()
}

tasks.named("bootJar") {
    launchScript()
}

springBoot {
    mainClass = "org.apereo.cas.web.CasWebApplication"
}

tasks.named("bootRun") {
    def casDir = project.hasProperty("casDir") ? project.getProperty("casDir") : "${projectDir}/cas"
    jvmArgs = [
            "-Dserver.contextPath=/cas",
            "-Dserver.port=8060",
            "-Dserver.ssl.keyStore=${casDir}/testkeystore.jks",
            "-Dserver.ssl.keyStorePassword=changeit",
            "-Dserver.ssl.keyPassword=changeit",
            "-Djavax.net.ssl.trustStore=${casDir}/testtruststore.jks",
            "-Djavax.net.ssl.trustStorePassword=changeit",
            "-Dlogging.config=classpath:log4j2.xml",
            "-Dcas.standalone.configuration-directory=${casDir}",
            "-Dcas.standalone.configuration-file=${casDir}/cas_config.yml",
            "-Dcas.service-registry.yaml.location=file:${casDir}/services"
    ]
}

// publishing with './gradlew publish'
publish.dependsOn assemble
publishToMavenLocal.dependsOn assemble
publishing {
    publications {
        maven(MavenPublication) {
            artifactId project.name
            version projectVersion
            groupId projectGroup
            from components.java
        }
    }

    repositories {
        maven {
            // Put the property settings in ~/.gradle/gradle.properties for
            // default_deploy_url, calnet_oss_deploy_lib_release_repo,
            // default_deploy_username and default_deploy_password.
            url "${project.property('default_deploy_url')}/${project.property('calnet_oss_deploy_lib_release_repo')}"
            credentials {
                username project.property("default_deploy_user")
                password project.property("default_deploy_password")
            }
        }
    }
}

task genSpringBootVerOverrides {
    doLast {
        def casGitBranch = "v${casVersion}"

        // CAS specifies its override versions in gradle.properties in root of the CAS source code.
        final def props = new Properties()
        try (def reader = new BufferedReader(new InputStreamReader(new URL("https://raw.githubusercontent.com/apereo/cas/${casGitBranch}/gradle.properties").openStream()))) {
            String line
            while ((line = reader.readLine()) != null) {
                if (line.contains("Version=")) {
                    def key = line.substring(0, line.indexOf("="))
                    def value = line.substring(line.indexOf("=") + 1)
                    props.put(key, value)
                }
            }
        }

        // CAS specifies Spring Boot version overrides in gradle/overrides.groovy in root of the CAS source code.
        def springBootVersionFile = file('springboot-versions.gradle')
        // skip groovy override for now: for some reason CAS wants to use Groovy 4 when Spring Boot doesn't support it yet.
        def skips = ['groovy.version']
        int counter = 0
        springBootVersionFile.withPrintWriter { writer ->
            try (def reader = new BufferedReader(new InputStreamReader(new URL("https://raw.githubusercontent.com/apereo/cas/${casGitBranch}/gradle/overrides.gradle").openStream()))) {
                String line
                while ((line = reader.readLine()) != null) {
                    if (line.startsWith("ext[")) {
                        // parse out lhs and rhs values from ext["lhs"] = ext["rhs"]
                        def matcher = line =~ /^ext\[["'](.*?)["']\]\s*=\s*ext\[["'](.*?)["']\]\s*$/
                        matcher.find()
                        def lhs = matcher.group(1)
                        def rhs = matcher.group(2)

                        if (!(lhs in skips)) {
                            // override the spring boot version to use what CAS source code has specified
                            def casOverrideVersion = props.get(rhs)
                            if (casOverrideVersion) {
                                writer.println "ext['$lhs'] = '$casOverrideVersion'"
                                counter++
                            }
                        }
                    }
                }
            }
        }
        println "Wrote $counter version overrides to $springBootVersionFile for CAS version $casVersion"
    }
}

def pdep(String depstr) {
    return (depstr.startsWith(":") ? project(depstr) : depstr)
}
